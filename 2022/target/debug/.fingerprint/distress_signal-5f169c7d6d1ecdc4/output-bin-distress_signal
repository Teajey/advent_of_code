{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"2022/13/src/recursive_number_list.rs","byte_start":29,"byte_end":38,"line_start":3,"line_end":3,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use common::*;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::wildcard-imports` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::wildcard_imports)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"2022/13/src/recursive_number_list.rs","byte_start":29,"byte_end":38,"line_start":3,"line_end":3,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use common::*;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"common::{Failure, Result, e}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m2022/13/src/recursive_number_list.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse common::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `common::{Failure, Result, e}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::wildcard-imports` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::wildcard_imports)]`\u001b[0m\n\n"}
{"message":"non-canonical implementation of `partial_cmp` on an `Ord` type","code":{"code":"clippy::non_canonical_partial_ord_impl","explanation":null},"level":"warning","spans":[{"file_name":"2022/13/src/recursive_number_list.rs","byte_start":58,"byte_end":862,"line_start":7,"line_end":26,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"impl PartialOrd for Oor<u8> {","highlight_start":1,"highlight_end":30},{"text":"    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {","highlight_start":1,"highlight_end":72},{"text":"        match (self, other) {","highlight_start":1,"highlight_end":30},{"text":"            (Oor::One(a), Oor::One(b)) => a.partial_cmp(b),","highlight_start":1,"highlight_end":60},{"text":"            (Oor::One(num), list) => Oor::RecursiveList(vec![Oor::One(*num)]).partial_cmp(list),","highlight_start":1,"highlight_end":97},{"text":"            (list, Oor::One(num)) => list.partial_cmp(&Oor::RecursiveList(vec![Oor::One(*num)])),","highlight_start":1,"highlight_end":98},{"text":"            (Oor::RecursiveList(a), Oor::RecursiveList(b)) => {","highlight_start":1,"highlight_end":64},{"text":"                for (a, b) in a.iter().zip(b) {","highlight_start":1,"highlight_end":48},{"text":"                    match a.partial_cmp(b) {","highlight_start":1,"highlight_end":45},{"text":"                        Some(Ordering::Equal) => (),","highlight_start":1,"highlight_end":53},{"text":"                        None => (),","highlight_start":1,"highlight_end":36},{"text":"                        ordering => return ordering,","highlight_start":1,"highlight_end":53},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                a.len().partial_cmp(&b.len())","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::non_canonical_partial_ord_impl)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"2022/13/src/recursive_number_list.rs","byte_start":158,"byte_end":860,"line_start":8,"line_end":25,"column_start":71,"column_end":6,"is_primary":true,"text":[{"text":"    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {","highlight_start":71,"highlight_end":72},{"text":"        match (self, other) {","highlight_start":1,"highlight_end":30},{"text":"            (Oor::One(a), Oor::One(b)) => a.partial_cmp(b),","highlight_start":1,"highlight_end":60},{"text":"            (Oor::One(num), list) => Oor::RecursiveList(vec![Oor::One(*num)]).partial_cmp(list),","highlight_start":1,"highlight_end":97},{"text":"            (list, Oor::One(num)) => list.partial_cmp(&Oor::RecursiveList(vec![Oor::One(*num)])),","highlight_start":1,"highlight_end":98},{"text":"            (Oor::RecursiveList(a), Oor::RecursiveList(b)) => {","highlight_start":1,"highlight_end":64},{"text":"                for (a, b) in a.iter().zip(b) {","highlight_start":1,"highlight_end":48},{"text":"                    match a.partial_cmp(b) {","highlight_start":1,"highlight_end":45},{"text":"                        Some(Ordering::Equal) => (),","highlight_start":1,"highlight_end":53},{"text":"                        None => (),","highlight_start":1,"highlight_end":36},{"text":"                        ordering => return ordering,","highlight_start":1,"highlight_end":53},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                a.len().partial_cmp(&b.len())","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"{ Some(self.cmp(other)) }","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: non-canonical implementation of `partial_cmp` on an `Ord` type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m2022/13/src/recursive_number_list.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m  \u001b[0m\u001b[0mimpl PartialOrd for Oor<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m_______________________________________________________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match (self, other) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Oor::One(a), Oor::One(b)) => a.partial_cmp(b),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Oor::One(num), list) => Oor::RecursiveList(vec![Oor::One(*num)]).partial_cmp(list),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: change this to: `{ Some(self.cmp(other)) }`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::non_canonical_partial_ord_impl)]` on by default\u001b[0m\n\n"}
{"message":"this match arm has an identical body to another arm","code":{"code":"clippy::match_same_arms","explanation":null},"level":"warning","spans":[{"file_name":"2022/13/src/recursive_number_list.rs","byte_start":679,"byte_end":689,"line_start":17,"line_end":17,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"                        None => (),","highlight_start":25,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"or try changing either arm body","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"other arm here","code":null,"level":"note","spans":[{"file_name":"2022/13/src/recursive_number_list.rs","byte_start":626,"byte_end":653,"line_start":16,"line_end":16,"column_start":25,"column_end":52,"is_primary":true,"text":[{"text":"                        Some(Ordering::Equal) => (),","highlight_start":25,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::match-same-arms` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::match_same_arms)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try merging the arm patterns","code":null,"level":"help","spans":[{"file_name":"2022/13/src/recursive_number_list.rs","byte_start":679,"byte_end":683,"line_start":17,"line_end":17,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"                        None => (),","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":"None | Some(Ordering::Equal)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this match arm has an identical body to another arm\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m2022/13/src/recursive_number_list.rs:17:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        None => (),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: try merging the arm patterns: `None | Some(Ordering::Equal)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or try changing either arm body\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: other arm here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m2022/13/src/recursive_number_list.rs:16:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Some(Ordering::Equal) => (),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::match_same_arms)]`\u001b[0m\n\n"}
{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"2022/13/src/main.rs","byte_start":32,"byte_end":41,"line_start":3,"line_end":3,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use common::*;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"2022/13/src/main.rs","byte_start":32,"byte_end":41,"line_start":3,"line_end":3,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use common::*;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"common::{Result, get_input}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m2022/13/src/main.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse common::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `common::{Result, get_input}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\n"}
{"message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
